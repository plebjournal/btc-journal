# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for dynamic methods in `ActiveSupport::TestCase`.
# Please instead update this file by running `bin/tapioca dsl ActiveSupport::TestCase`.


class ActiveSupport::TestCase
  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[CurrentPrice]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(CurrentPrice) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[CurrentPrice])
  end
  def current_prices(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[FiatCurrency]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(FiatCurrency) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[FiatCurrency])
  end
  def fiat_currencies(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[HistoricalPrice]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(HistoricalPrice) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[HistoricalPrice])
  end
  def historical_prices(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[Transaction]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(Transaction) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[Transaction])
  end
  def transactions(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[UserSetting]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(UserSetting) }
  sig do
    params(
      fixture_name: T.any(String, Symbol),
      other_fixtures: T.any(String, Symbol)
    ).returns(T::Array[UserSetting])
  end
  def user_settings(fixture_name = nil, *other_fixtures); end

  sig { params(fixture_name: NilClass, other_fixtures: NilClass).returns(T::Array[User]) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: NilClass).returns(User) }
  sig { params(fixture_name: T.any(String, Symbol), other_fixtures: T.any(String, Symbol)).returns(T::Array[User]) }
  def users(fixture_name = nil, *other_fixtures); end
end
